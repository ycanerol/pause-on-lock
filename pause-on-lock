#!/usr/bin/env bash
#
# Copyright (c) 2016-2019 Thomas Goldbrunner
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
VERSION="1.5.2"
RELEASE_DATE="2019-11-21"

# print usage information
function __print_help {
  echo "Usage: \$ pause-on-lock [option]"
  echo ""
  echo "Options:"
  echo ""
  echo "    -h        print this help text and exit"
  echo "    -v        print version information and exit"
  echo ""
  echo "For more information visit https://github.com/folixg/pause-on-lock"
  echo ""
}

# parse command line options
if [ $# -gt 0 ] ; then
  if [ $# -gt 1 ] ; then
    echo "Error: Only one command line option is allowed."
    echo ""
    __print_help
    exit 1
  fi
  if [ "$1" == "-h" ] ; then
    __print_help
    exit 0
  elif [ "$1" == "-v" ] ; then
    echo "This is pause-on-lock $VERSION (released $RELEASE_DATE)"
    echo ""
    exit 0
  else
    echo "Error: Invalid command line option."
    echo ""
    __print_help
    exit 1
  fi
fi


if [ "$XDG_CURRENT_DESKTOP" == "Unity" ] ; then
  DBUS_LOCK="interface='com.canonical.Unity.Session'"
  LOCK_SIGNAL="Locked"
  UNLOCK_SIGNAL="Unlocked"
# use wildcards to catch "GNOME" and "ubuntu:GNOME"
elif [[ "$XDG_CURRENT_DESKTOP" == *"GNOME"* ]] ; then
  DBUS_LOCK="interface='org.gnome.ScreenSaver',member='ActiveChanged'"
  LOCK_SIGNAL="true"
  UNLOCK_SIGNAL="false"
elif [ "$XDG_CURRENT_DESKTOP" == "X-Cinnamon" ] ; then
  DBUS_LOCK="interface='org.cinnamon.ScreenSaver',member='ActiveChanged'"
  LOCK_SIGNAL="true"
  UNLOCK_SIGNAL="false"
elif [ "$XDG_CURRENT_DESKTOP" == "MATE" ] ; then
  DBUS_LOCK="interface='org.mate.ScreenSaver',member='ActiveChanged'"
  LOCK_SIGNAL="true"
  UNLOCK_SIGNAL="false"
elif [ "$XDG_CURRENT_DESKTOP" == "KDE" ] ; then
  DBUS_LOCK="interface='org.freedesktop.ScreenSaver',member='ActiveChanged'"
  LOCK_SIGNAL="true"
  UNLOCK_SIGNAL="false"
else
echo "Error: Unsupported desktop. Supported desktops are Unity, GNOME, Cinnamon, Mate and KDE."
exit 1
fi
dbus-monitor --session "type='signal',$DBUS_LOCK" | \
(
  # variable to check, whether we paused on lock
  PAUSED_PLAYER="none"
  # D-Bus objects, methods, etc. we need to control players
  RHYTHMBOX="org.mpris.MediaPlayer2.rhythmbox"
  SPOTIFY="org.mpris.MediaPlayer2.spotify"
  VLC="org.mpris.MediaPlayer2.vlc"
  MEDIAPLAYER="/org/mpris/MediaPlayer2"
  GET_PROPERTIES="org.freedesktop.DBus.Properties.Get"
  PLAYER="org.mpris.MediaPlayer2.Player"

  while true; do
    read -r X
    # pause on lock
    if echo "$X" | grep "$LOCK_SIGNAL" &> /dev/null; then
      # with playerctl
      if [ "$(playerctl --version 2>/dev/null)" ]; then
        # get list of running players
        read -r -a players <<< "$(playerctl --list-all)"
        # check whether a player is playing
        for player in "${players[@]}"
        do
          if [ "$(playerctl --player="$player" status)" = "Playing" ] ; then
            # and pause it
            playerctl --player="$player" pause
            PAUSED_PLAYER=$player
          fi
        done
      # without playerctl
      else
        if  dbus-send --print-reply --dest="$RHYTHMBOX" "$MEDIAPLAYER" \
          "$GET_PROPERTIES" string:$PLAYER string:'PlaybackStatus' | \
          grep 'Playing' &> /dev/null; then
          dbus-send --print-reply --dest="$RHYTHMBOX" "$MEDIAPLAYER" \
            "$PLAYER".Pause &> /dev/null
          PAUSED_PLAYER="rhythmbox"
        elif  dbus-send --print-reply --dest="$SPOTIFY" "$MEDIAPLAYER" \
          "$GET_PROPERTIES" string:$PLAYER string:'PlaybackStatus' | \
          grep 'Playing' &> /dev/null; then
          dbus-send --print-reply --dest="$SPOTIFY" "$MEDIAPLAYER" \
            "$PLAYER".Pause &> /dev/null
          PAUSED_PLAYER="spotify"
        elif  dbus-send --print-reply --dest="$VLC" "$MEDIAPLAYER" \
          "$GET_PROPERTIES" string:$PLAYER string:'PlaybackStatus' | \
            grep 'Playing' &> /dev/null; then
          dbus-send --type=method_call --dest="$VLC" "$MEDIAPLAYER"\
            "$PLAYER".Pause &> /dev/null
          PAUSED_PLAYER="vlc"
        fi
      fi
    fi
    # resume on unlock
    if echo "$X" | grep "$UNLOCK_SIGNAL" &> /dev/null; then
      # with playerctl
      if [ "$(playerctl --version 2>/dev/null)" ]; then
        # did we pause a player on lock?
        if [ "$PAUSED_PLAYER" != "none" ]; then
          playerctl --player="$PAUSED_PLAYER" play
        fi
      # without playerctl
      else
        # did we pause on lock?
        if [ "$PAUSED_PLAYER" = "rhythmbox" ] ; then
          dbus-send --print-reply --dest="$RHYTHMBOX" "$MEDIAPLAYER" \
            "$PLAYER".Play &> /dev/null
        elif [ "$PAUSED_PLAYER" = "spotify" ] ; then
          dbus-send --print-reply --dest="$SPOTIFY" "$MEDIAPLAYER" \
            "$PLAYER".Play &> /dev/null
        elif [ "$PAUSED_PLAYER" = "vlc" ] ; then
          dbus-send --type=method_call --dest="$VLC" "$MEDIAPLAYER"\
            "$PLAYER".Play &> /dev/null
        fi
      fi
      # reset PAUSED_PLAYER variable
      PAUSED_PLAYER="none"
    fi
  done
)
